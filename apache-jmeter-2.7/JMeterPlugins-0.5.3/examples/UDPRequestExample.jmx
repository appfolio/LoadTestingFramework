<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="2.1">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments">This test plan demonstrate several UDP requests: NTP and DNS</stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>true</xml>
            <fieldNames>false</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
          </value>
        </objProp>
        <stringProp name="TestPlan.comments">Run the test and investigate generated samples.
Compare samples with data from network sniffer, 
if you have one.</stringProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <kg.apc.jmeter.threads.UltimateThreadGroup guiclass="kg.apc.jmeter.threads.UltimateThreadGroupGui" testclass="kg.apc.jmeter.threads.UltimateThreadGroup" testname="jp@gc - Ultimate Thread Group" enabled="true">
        <collectionProp name="ultimatethreadgroupdata">
          <collectionProp name="-1282668947">
            <stringProp name="1567">10</stringProp>
            <stringProp name="0">0</stringProp>
            <stringProp name="1598">20</stringProp>
            <stringProp name="53">5</stringProp>
            <stringProp name="53">5</stringProp>
          </collectionProp>
        </collectionProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="TestPlan.comments">Thread group set to work for 30 seconds, it generates more than 100 samples</stringProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
      </kg.apc.jmeter.threads.UltimateThreadGroup>
      <hashTree>
        <kg.apc.jmeter.samplers.UDPSampler guiclass="kg.apc.jmeter.samplers.UDPSamplerGui" testclass="kg.apc.jmeter.samplers.UDPSampler" testname="jp@gc - UDP Request NTP Hex" enabled="true">
          <stringProp name="TestPlan.comments">This sampler set to make NTP query and wait for response.
Binary request data encoded in HEX format 
and HexStringUDPDecoder used to transform it to/from binary bytes.</stringProp>
          <stringProp name="hostname">time.windows.com</stringProp>
          <stringProp name="port">123</stringProp>
          <boolProp name="waitresponse">true</boolProp>
          <stringProp name="timeout">2000</stringProp>
          <stringProp name="data">e30004fa000100000001000000000000000000000000000000000000000000000000000000000000d13845a5ee1650a4</stringProp>
          <stringProp name="encodeclass">kg.apc.jmeter.samplers.HexStringUDPDecoder</stringProp>
        </kg.apc.jmeter.samplers.UDPSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1556367">1c.+</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
            <stringProp name="TestPlan.comments">This assertion checks first byte of Hex-encoded NTP response.
This byte contains response flags. 1C is OK.</stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <kg.apc.jmeter.samplers.UDPSampler guiclass="kg.apc.jmeter.samplers.UDPSamplerGui" testclass="kg.apc.jmeter.samplers.UDPSampler" testname="jp@gc - UDP Request DNS Hex" enabled="true">
          <stringProp name="hostname">198.41.0.4</stringProp>
          <stringProp name="port">53</stringProp>
          <boolProp name="waitresponse">true</boolProp>
          <stringProp name="timeout">3000</stringProp>
          <stringProp name="data">daa501000001000000000000037777770c7075626c69632d747275737403636f6d0000010001</stringProp>
          <stringProp name="encodeclass">kg.apc.jmeter.samplers.HexStringUDPDecoder</stringProp>
          <stringProp name="TestPlan.comments">This sampler set to make DNS query for &apos;api.twitter.com&apos; 
and wait for response. Binary request data encoded in HEX format 
and HexStringUDPDecoder used to transform it to/from binary bytes.</stringProp>
        </kg.apc.jmeter.samplers.UDPSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="397109686">....8100.+</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
            <stringProp name="TestPlan.comments">This assertion checks DNS response flags in HEX-encoded response.</stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <kg.apc.jmeter.samplers.UDPSampler guiclass="kg.apc.jmeter.samplers.UDPSamplerGui" testclass="kg.apc.jmeter.samplers.UDPSampler" testname="jp@gc - UDP Request DNSJava" enabled="true">
          <stringProp name="hostname">198.41.0.4</stringProp>
          <stringProp name="port">53</stringProp>
          <boolProp name="waitresponse">true</boolProp>
          <stringProp name="timeout">3000</stringProp>
          <stringProp name="data">api.twitter.com. A IN</stringProp>
          <stringProp name="encodeclass">kg.apc.jmeter.samplers.DNSJavaDecoder</stringProp>
          <stringProp name="TestPlan.comments">This UDP request uses DNSJavaDecoder class and requires
DNSJava library present in JMeter lib folder.
This allows providing request/response data in human readable format.</stringProp>
        </kg.apc.jmeter.samplers.UDPSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1461206841">NOERROR</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="TestPlan.comments">This assertion checks text response to contain NOERROR flag.</stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <kg.apc.jmeter.samplers.UDPSampler guiclass="kg.apc.jmeter.samplers.UDPSamplerGui" testclass="kg.apc.jmeter.samplers.UDPSampler" testname="jp@gc - UDP Request Raw" enabled="true">
          <stringProp name="hostname">www.com</stringProp>
          <stringProp name="port">9</stringProp>
          <boolProp name="waitresponse">false</boolProp>
          <stringProp name="timeout"></stringProp>
          <stringProp name="data">Test binary string</stringProp>
          <stringProp name="encodeclass">kg.apc.jmeter.samplers.UDPSampler</stringProp>
          <stringProp name="TestPlan.comments">This sampler just make dummy UDP request and use UDPSampler encoder/decoder, 
which treat request/response data as binary</stringProp>
        </kg.apc.jmeter.samplers.UDPSampler>
        <hashTree/>
      </hashTree>
      <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
        <stringProp name="TestPlan.comments">This timer used to slow sampling down, and not make DoS attack to public servers.</stringProp>
        <stringProp name="ConstantTimer.delay">0</stringProp>
        <stringProp name="RandomTimer.range">3000.0</stringProp>
      </UniformRandomTimer>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
